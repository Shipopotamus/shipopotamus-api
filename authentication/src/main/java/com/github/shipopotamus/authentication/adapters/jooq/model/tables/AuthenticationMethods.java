/*
 * This file is generated by jOOQ.
 */
package com.github.shipopotamus.authentication.adapters.jooq.model.tables;


import com.github.shipopotamus.authentication.adapters.jooq.model.AuthenticationSchema;
import com.github.shipopotamus.authentication.adapters.jooq.model.Keys;
import com.github.shipopotamus.authentication.adapters.jooq.model.tables.records.AuthenticationMethodsRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthenticationMethods extends TableImpl<AuthenticationMethodsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>authentication_schema.authentication_methods</code>
     */
    public static final AuthenticationMethods AUTHENTICATION_METHODS = new AuthenticationMethods();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuthenticationMethodsRecord> getRecordType() {
        return AuthenticationMethodsRecord.class;
    }

    /**
     * The column <code>authentication_schema.authentication_methods.id</code>.
     */
    public final TableField<AuthenticationMethodsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>authentication_schema.authentication_methods.account_id</code>.
     */
    public final TableField<AuthenticationMethodsRecord, UUID> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>authentication_schema.authentication_methods.authentication_method_type</code>.
     */
    public final TableField<AuthenticationMethodsRecord, String> AUTHENTICATION_METHOD_TYPE = createField(DSL.name("authentication_method_type"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column
     * <code>authentication_schema.authentication_methods.created_at</code>.
     */
    public final TableField<AuthenticationMethodsRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    private AuthenticationMethods(Name alias, Table<AuthenticationMethodsRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuthenticationMethods(Name alias, Table<AuthenticationMethodsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>authentication_schema.authentication_methods</code> table reference
     */
    public AuthenticationMethods(String alias) {
        this(DSL.name(alias), AUTHENTICATION_METHODS);
    }

    /**
     * Create an aliased
     * <code>authentication_schema.authentication_methods</code> table reference
     */
    public AuthenticationMethods(Name alias) {
        this(alias, AUTHENTICATION_METHODS);
    }

    /**
     * Create a <code>authentication_schema.authentication_methods</code> table
     * reference
     */
    public AuthenticationMethods() {
        this(DSL.name("authentication_methods"), null);
    }

    public <O extends Record> AuthenticationMethods(Table<O> child, ForeignKey<O, AuthenticationMethodsRecord> key) {
        super(child, key, AUTHENTICATION_METHODS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AuthenticationSchema.AUTHENTICATION_SCHEMA;
    }

    @Override
    public UniqueKey<AuthenticationMethodsRecord> getPrimaryKey() {
        return Keys.AUTHENTICATION_METHODS_PKEY;
    }

    @Override
    public List<ForeignKey<AuthenticationMethodsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.AUTHENTICATION_METHODS__AUTHENTICATION_METHODS_ACCOUNT_ID_FKEY);
    }

    private transient Accounts _accounts;

    /**
     * Get the implicit join path to the
     * <code>authentication_schema.accounts</code> table.
     */
    public Accounts accounts() {
        if (_accounts == null)
            _accounts = new Accounts(this, Keys.AUTHENTICATION_METHODS__AUTHENTICATION_METHODS_ACCOUNT_ID_FKEY);

        return _accounts;
    }

    @Override
    public AuthenticationMethods as(String alias) {
        return new AuthenticationMethods(DSL.name(alias), this);
    }

    @Override
    public AuthenticationMethods as(Name alias) {
        return new AuthenticationMethods(alias, this);
    }

    @Override
    public AuthenticationMethods as(Table<?> alias) {
        return new AuthenticationMethods(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthenticationMethods rename(String name) {
        return new AuthenticationMethods(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthenticationMethods rename(Name name) {
        return new AuthenticationMethods(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthenticationMethods rename(Table<?> name) {
        return new AuthenticationMethods(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, UUID, String, OffsetDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super UUID, ? super UUID, ? super String, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super UUID, ? super UUID, ? super String, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
