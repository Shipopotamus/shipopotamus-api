/*
 * This file is generated by jOOQ.
 */
package com.github.shipopotamus.authentication.adapters.jooq.model.tables.records;


import com.github.shipopotamus.authentication.adapters.jooq.model.tables.EmailPasswordAuthentications;

import java.time.OffsetDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EmailPasswordAuthenticationsRecord extends UpdatableRecordImpl<EmailPasswordAuthenticationsRecord> implements Record4<UUID, String, String, OffsetDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>authentication_schema.email_password_authentications.authentication_method_id</code>.
     */
    public void setAuthenticationMethodId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>authentication_schema.email_password_authentications.authentication_method_id</code>.
     */
    public UUID getAuthenticationMethodId() {
        return (UUID) get(0);
    }

    /**
     * Setter for
     * <code>authentication_schema.email_password_authentications.email</code>.
     */
    public void setEmail(String value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>authentication_schema.email_password_authentications.email</code>.
     */
    public String getEmail() {
        return (String) get(1);
    }

    /**
     * Setter for
     * <code>authentication_schema.email_password_authentications.encoded_password</code>.
     */
    public void setEncodedPassword(String value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>authentication_schema.email_password_authentications.encoded_password</code>.
     */
    public String getEncodedPassword() {
        return (String) get(2);
    }

    /**
     * Setter for
     * <code>authentication_schema.email_password_authentications.created_at</code>.
     */
    public void setCreatedAt(OffsetDateTime value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>authentication_schema.email_password_authentications.created_at</code>.
     */
    public OffsetDateTime getCreatedAt() {
        return (OffsetDateTime) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, String, OffsetDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<UUID, String, String, OffsetDateTime> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return EmailPasswordAuthentications.EMAIL_PASSWORD_AUTHENTICATIONS.AUTHENTICATION_METHOD_ID;
    }

    @Override
    public Field<String> field2() {
        return EmailPasswordAuthentications.EMAIL_PASSWORD_AUTHENTICATIONS.EMAIL;
    }

    @Override
    public Field<String> field3() {
        return EmailPasswordAuthentications.EMAIL_PASSWORD_AUTHENTICATIONS.ENCODED_PASSWORD;
    }

    @Override
    public Field<OffsetDateTime> field4() {
        return EmailPasswordAuthentications.EMAIL_PASSWORD_AUTHENTICATIONS.CREATED_AT;
    }

    @Override
    public UUID component1() {
        return getAuthenticationMethodId();
    }

    @Override
    public String component2() {
        return getEmail();
    }

    @Override
    public String component3() {
        return getEncodedPassword();
    }

    @Override
    public OffsetDateTime component4() {
        return getCreatedAt();
    }

    @Override
    public UUID value1() {
        return getAuthenticationMethodId();
    }

    @Override
    public String value2() {
        return getEmail();
    }

    @Override
    public String value3() {
        return getEncodedPassword();
    }

    @Override
    public OffsetDateTime value4() {
        return getCreatedAt();
    }

    @Override
    public EmailPasswordAuthenticationsRecord value1(UUID value) {
        setAuthenticationMethodId(value);
        return this;
    }

    @Override
    public EmailPasswordAuthenticationsRecord value2(String value) {
        setEmail(value);
        return this;
    }

    @Override
    public EmailPasswordAuthenticationsRecord value3(String value) {
        setEncodedPassword(value);
        return this;
    }

    @Override
    public EmailPasswordAuthenticationsRecord value4(OffsetDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public EmailPasswordAuthenticationsRecord values(UUID value1, String value2, String value3, OffsetDateTime value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached EmailPasswordAuthenticationsRecord
     */
    public EmailPasswordAuthenticationsRecord() {
        super(EmailPasswordAuthentications.EMAIL_PASSWORD_AUTHENTICATIONS);
    }

    /**
     * Create a detached, initialised EmailPasswordAuthenticationsRecord
     */
    public EmailPasswordAuthenticationsRecord(UUID authenticationMethodId, String email, String encodedPassword, OffsetDateTime createdAt) {
        super(EmailPasswordAuthentications.EMAIL_PASSWORD_AUTHENTICATIONS);

        setAuthenticationMethodId(authenticationMethodId);
        setEmail(email);
        setEncodedPassword(encodedPassword);
        setCreatedAt(createdAt);
        resetChangedOnNotNull();
    }
}
