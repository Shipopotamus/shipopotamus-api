/*
 * This file is generated by jOOQ.
 */
package com.github.shipopotamus.authentication.adapters.jooq.model.tables;


import com.github.shipopotamus.authentication.adapters.jooq.model.AuthenticationSchema;
import com.github.shipopotamus.authentication.adapters.jooq.model.Keys;
import com.github.shipopotamus.authentication.adapters.jooq.model.tables.records.EmailPasswordAuthenticationsRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EmailPasswordAuthentications extends TableImpl<EmailPasswordAuthenticationsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>authentication_schema.email_password_authentications</code>
     */
    public static final EmailPasswordAuthentications EMAIL_PASSWORD_AUTHENTICATIONS = new EmailPasswordAuthentications();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmailPasswordAuthenticationsRecord> getRecordType() {
        return EmailPasswordAuthenticationsRecord.class;
    }

    /**
     * The column
     * <code>authentication_schema.email_password_authentications.authentication_method_id</code>.
     */
    public final TableField<EmailPasswordAuthenticationsRecord, UUID> AUTHENTICATION_METHOD_ID = createField(DSL.name("authentication_method_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>authentication_schema.email_password_authentications.email</code>.
     */
    public final TableField<EmailPasswordAuthenticationsRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column
     * <code>authentication_schema.email_password_authentications.encoded_password</code>.
     */
    public final TableField<EmailPasswordAuthenticationsRecord, String> ENCODED_PASSWORD = createField(DSL.name("encoded_password"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column
     * <code>authentication_schema.email_password_authentications.created_at</code>.
     */
    public final TableField<EmailPasswordAuthenticationsRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    private EmailPasswordAuthentications(Name alias, Table<EmailPasswordAuthenticationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private EmailPasswordAuthentications(Name alias, Table<EmailPasswordAuthenticationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>authentication_schema.email_password_authentications</code> table
     * reference
     */
    public EmailPasswordAuthentications(String alias) {
        this(DSL.name(alias), EMAIL_PASSWORD_AUTHENTICATIONS);
    }

    /**
     * Create an aliased
     * <code>authentication_schema.email_password_authentications</code> table
     * reference
     */
    public EmailPasswordAuthentications(Name alias) {
        this(alias, EMAIL_PASSWORD_AUTHENTICATIONS);
    }

    /**
     * Create a
     * <code>authentication_schema.email_password_authentications</code> table
     * reference
     */
    public EmailPasswordAuthentications() {
        this(DSL.name("email_password_authentications"), null);
    }

    public <O extends Record> EmailPasswordAuthentications(Table<O> child, ForeignKey<O, EmailPasswordAuthenticationsRecord> key) {
        super(child, key, EMAIL_PASSWORD_AUTHENTICATIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AuthenticationSchema.AUTHENTICATION_SCHEMA;
    }

    @Override
    public UniqueKey<EmailPasswordAuthenticationsRecord> getPrimaryKey() {
        return Keys.EMAIL_PASSWORD_AUTHENTICATIONS_PKEY;
    }

    @Override
    public List<ForeignKey<EmailPasswordAuthenticationsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EMAIL_PASSWORD_AUTHENTICATIONS__EMAIL_PASSWORD_AUTHENTICATIONS_AUTHENTICATION_METHOD_ID_FKEY);
    }

    private transient AuthenticationMethods _authenticationMethods;

    /**
     * Get the implicit join path to the
     * <code>authentication_schema.authentication_methods</code> table.
     */
    public AuthenticationMethods authenticationMethods() {
        if (_authenticationMethods == null)
            _authenticationMethods = new AuthenticationMethods(this, Keys.EMAIL_PASSWORD_AUTHENTICATIONS__EMAIL_PASSWORD_AUTHENTICATIONS_AUTHENTICATION_METHOD_ID_FKEY);

        return _authenticationMethods;
    }

    @Override
    public EmailPasswordAuthentications as(String alias) {
        return new EmailPasswordAuthentications(DSL.name(alias), this);
    }

    @Override
    public EmailPasswordAuthentications as(Name alias) {
        return new EmailPasswordAuthentications(alias, this);
    }

    @Override
    public EmailPasswordAuthentications as(Table<?> alias) {
        return new EmailPasswordAuthentications(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EmailPasswordAuthentications rename(String name) {
        return new EmailPasswordAuthentications(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EmailPasswordAuthentications rename(Name name) {
        return new EmailPasswordAuthentications(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EmailPasswordAuthentications rename(Table<?> name) {
        return new EmailPasswordAuthentications(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, String, OffsetDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super UUID, ? super String, ? super String, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super UUID, ? super String, ? super String, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
